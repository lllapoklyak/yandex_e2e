package tsedneva;

import org.junit.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import tsedneva.FirstTest;

import java.security.SecureRandom;
import java.util.concurrent.TimeUnit;

public class Utils {
    public static void login(WebDriver driver, String log, String pass) {
//      //open page
        WebElement enterButton = driver.findElement(By.cssSelector("a.HeadBanner-Button-Enter"));
        enterButton.click();
        //Login Page
        // In web-inspector:
        //  $('input.passport-Input-Controller[name="login"]')
        //  $('input.textinput__control[name="login"]')

        //WebElement loginField = driver.findElement((By.cssSelector("input.passport-Input-Controller[name=\"login\"]")));

        // A/B testing detection
        WebElement loginField;

        try {
            loginField = driver.findElement((By.cssSelector("input.textinput__control[name=\"login\"]")));
            loginField.sendKeys(log);
            WebElement loginButton = driver.findElement(By.cssSelector("button.passp-form-button"));
            loginButton.click();
            //next page

            // by id $('#passp-field-passwd')  might be autogenerated
            // by name $('input[name="passwd"]')
            WebElement passFiels = driver.findElement(By.cssSelector("#passp-field-passwd"));
            passFiels.sendKeys(pass);
            loginButton = driver.findElement(By.cssSelector("button.passp-form-button"));
            loginButton.click();


        } catch (NoSuchElementException e) {
            loginField = driver.findElement((By.cssSelector("input.passport-Input-Controller[name=\"login\"]")));
            loginField.sendKeys(log);
            WebElement passField = driver.findElement(By.cssSelector("input.passport-Input-Controller[name=\"passwd\"]"));
            passField.sendKeys(pass);
            WebElement loginButton = driver.findElement(By.cssSelector("button.passport-Button[type=\"submit\"]"));
            loginButton.click();
        }


    }

    public static void sendEmail(WebDriver driver, EmailTemplate myEmail) {
        createEmail(driver, myEmail);

        WebElement sendButton = driver.findElement(By.cssSelector(".mail-Compose-ComplexSendButton > button"));
        sendButton.click();
        //driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);
        //WebElement dynamicButtonSave = driver.findElement(By.cssSelector("button.nb-button[data-action=\"save\"]"));
        // dynamicButtonSave.click();

//        WebElement dynamicButtonSave = (new WebDriverWait(driver, 16))
//                //.until(ExpectedConditions.elementToBeClickable(By.cssSelector("button.nb-button[data-action=\"save\"]")));
//                //.until(ExpectedConditions.elementToBeClickable(By.cssSelector("div.mail-MessagesList")));
//                .until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("div.mail-MessagesList")));


    }

    public static void sendEmailToMyself(WebDriver driver) {
        WebElement writeButton = driver.findElement(By.cssSelector("a.mail-ComposeButton"));
        writeButton.click();

        WebElement addressMyself = driver.findElement(By.cssSelector("span.mail-Compose-Field-Caption"));
        addressMyself.click();

        WebElement emailTheme = driver.findElement(By.cssSelector("input.mail-Compose-Field-Input-Controller"));
        emailTheme.sendKeys("test first email");

        //$('.cke_wysiwyg_div').text('TEST')
        WebElement emailText = driver.findElement(By.cssSelector(".cke_wysiwyg_div"));
        emailText.sendKeys("this is my first test email");
        //$('.mail-Compose-ComplexSendButton > button')   у этого дива баттон
        //.bala взять любой элемент с этим классом

        WebElement sendButton = driver.findElement(By.cssSelector(".mail-Compose-ComplexSendButton > button"));
        sendButton.click();


    }

    public static void wrongEmail(WebDriver driver, String address) {
        WebElement writeButton = (new WebDriverWait(driver, 10))
                .until(ExpectedConditions.elementToBeClickable(By.cssSelector("a.mail-ComposeButton")));

        writeButton.click();

        WebElement emailTo = driver.findElement(By.cssSelector(".js-compose-field[name=\"to\"]"));
        emailTo.sendKeys(address);

        WebElement sendButton = driver.findElement(By.cssSelector(".mail-Compose-ComplexSendButton > button"));

        sendButton.click();
        Assert.assertTrue(driver.findElement(By.cssSelector(".ns-view-compose-field-to-error ")) != null);

    }


    public static void createEmail(WebDriver driver, EmailTemplate email) {
        // async load component

        WebElement writeButton = (new WebDriverWait(driver, 10))
                .until(ExpectedConditions.elementToBeClickable(By.cssSelector("a.mail-ComposeButton")));
        // WebElement writeButton = driver.findElement(By.cssSelector("a.mail-ComposeButton"));
        writeButton.click();
        WebElement emailTo = driver.findElement(By.cssSelector(".js-compose-field[name=\"to\"]"));
        emailTo.sendKeys(email.email);

        WebElement emailTheme = driver.findElement(By.cssSelector("input.mail-Compose-Field-Input-Controller"));
        emailTheme.sendKeys(email.topic);

        WebElement emailText = driver.findElement(By.cssSelector(".cke_wysiwyg_div"));
        emailText.sendKeys(email.body);


    }

    public static void checkDrafts(WebDriver driver, EmailTemplate email) {
        email.body = "Tanya test template 11";
        createEmail(driver, email);

        WebElement a = driver.findElement(By.cssSelector("a.ns-view-folder[href=\"#trash\"]"));
        a.click();
        WebElement save = driver.findElement(By.cssSelector("button.nb-button[data-action=\"save\"]"));
        save.click();

        a = driver.findElement(By.cssSelector("a.ns-view-folder[href=\"#draft\"]"));
        a.click();

        //open the first element in list
        WebElement openEmail = driver.findElement(By.cssSelector(".mail-MessagesList > div.mail-MessageSnippet-Wrap:first-child"));
        openEmail.click();

        WebElement emailTo = driver.findElement(By.cssSelector(".js-compose-field[name=\"to\"] .mail-Bubble-Block_text"));
        String thisMail = emailTo.getText();
        WebElement emailTopic = driver.findElement(By.cssSelector("input.mail-Compose-Field-Input-Controller"));
        String thisTopic = emailTopic.getAttribute("value");
        WebElement emailText = driver.findElement(By.cssSelector(".cke_wysiwyg_div"));
        String thisText = emailText.getText();

        String e = email.email;
        //Assert.assertEquals(e, driver.findElement(By.cssSelector(".js-compose-field[name=\"to\"]")));
        //Assert.assertEquals(e, thisMail);

        Assert.assertEquals(email.topic, thisTopic);
        Assert.assertEquals(email.body, thisText);


    }

    public static void receiveEmail(WebDriver driver, EmailTemplate originalemail) {

        WebElement myinbox = driver.findElement(By.cssSelector("a.ns-view-folder[href=\"#inbox\"]"));
        myinbox.click();
        //driver.navigate().refresh();
        driver.navigate().to(driver.getCurrentUrl());

        WebElement openEmail = driver.findElement(By.cssSelector(".mail-MessagesList > div.mail-MessageSnippet-Wrap:first-child"));
        openEmail.click();


        WebElement emailSender = driver.findElement(By.cssSelector(".mail-Message-Head-Content .mail-Message-Sender-Email" +
                ""));
        String receivedFrom = emailSender.getText();

        WebElement emailTopic = driver.findElement(By.cssSelector(".mail-Message-Toolbar-Subject"));
        String receivedTopic = emailTopic.getText();

        WebElement emailText = driver.findElement(By.cssSelector(".mail-Message-Body-Content"));
        String receivedText = emailText.getText();

        Assert.assertEquals(originalemail.topic, receivedTopic);
        Assert.assertEquals(originalemail.body, receivedText);

    }

    public static void reply(WebDriver driver, String answer) {
        WebElement replyEl = driver.findElement(By.cssSelector(".js-quick-reply-placeholder-single-reply"));
        replyEl.click();


        //WebElement textField = driver.findElement(By.cssSelector(".mail-Editor-Container .cke_wysiwyg_div > div"));
//        WebElement textField = driver.findElement(By.cssSelector(".ns-view-compose-message-editor-tiny"));
        WebElement gotoTextField = driver.findElement(By.cssSelector(".ns-view-compose-go-to-compose"));
        gotoTextField.click();
        WebElement emailText = driver.findElement(By.cssSelector(".cke_wysiwyg_div"));
        emailText.sendKeys(answer);
        WebElement sendButton = driver.findElement(By.cssSelector(".mail-Compose-ComplexSendButton > button"));
        sendButton.click();

        WebElement doneMessage = driver.findElement(By.cssSelector(".mail-Done-Title"));

        Assert.assertEquals(doneMessage.getText(), "Письмо отправлено.");
    }

    public static void deleteEmail(WebDriver driver) {

        (new WebDriverWait(driver, 25)).until(
            ExpectedConditions.visibilityOfElementLocated(By.cssSelector(".js-quick-reply-placeholder-single-reply")));

        WebElement deleteButton = (new WebDriverWait(driver, 25)).until(
            ExpectedConditions.elementToBeClickable(By.cssSelector(".mail-Toolbar-Item_delete")));

        deleteButton.click();

        WebElement openEmail = driver.findElement(
                By.cssSelector(".mail-MessagesList > div.mail-MessageSnippet-Wrap:first-child"));
        openEmail.click();
    }


}